datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  softDeletedAt DateTime?

  salary        Int?
  salaryRangeId String?
  salaryRange   SalaryRange? @relation(fields: [salaryRangeId], references: [id])
  businessTypeId Int?
  businessType   BusinessType? @relation(fields: [businessTypeId], references: [id])
  jobCategoryId Int?
  jobCategory   JobCategory? @relation(fields: [jobCategoryId], references: [id])
  birthYear     Int?

  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
  notifications Notification[]
  fromUser      Notification[] @relation("FromUser")

  @@index([salaryRangeId])
  @@index([businessTypeId])
  @@index([jobCategoryId])
}

model BusinessType {
  id   Int    @id
  name String

  users User[]
}

model JobCategory {
  id   Int    @id
  name String

  users User[]
}

model SalaryRange {
  id  String @id
  min Int
  max Int?

  threads Thread[]
  users   User[]
  comments Comment[]
}

model Thread {
  id            Int         @id @default(autoincrement())
  salaryRangeId String
  salaryRange   SalaryRange @relation(fields: [salaryRangeId], references: [id])
  genreId       Int
  genre         Genre       @relation(fields: [genreId], references: [id])
  title         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  comments Comment[]

  @@index([salaryRangeId])
  @@index([genreId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  threadId  Int
  thread    Thread   @relation(fields: [threadId], references: [id])
  body      String
  salaryRangeId String
  salaryRange   SalaryRange @relation(fields: [salaryRangeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  toCommentId Int?
  toComment   Comment?  @relation("CommentToComment", fields: [toCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[] @relation("CommentToComment")

  likes         Like[]
  bookmarks     Bookmark[]
  notifications Notification[]
  fromUser      Notification[] @relation("CommentToComment")

  @@index([userId])
  @@index([toCommentId])
  @@index([threadId])
  @@index([salaryRangeId])
}

model Genre {
  id   Int    @id
  name String

  threads Thread[]
}

model Bookmark {
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Like {
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

enum NotificationType {
  LIKE
  REPLY
  ANNOUNCEMENT
}

model Notification {
  id         Int              @id @default(autoincrement())
  userId     String
  user       User             @relation(fields: [userId], references: [id])
  commentId  Int?
  comment    Comment?         @relation(fields: [commentId], references: [id])
  fromUserId String?
  fromUser   User?            @relation("FromUser", fields: [fromUserId], references: [id])
  replyId    Int?
  reply      Comment?         @relation("CommentToComment", fields: [replyId], references: [id])
  type       NotificationType
  url        String?
  body       String?
  createdAt  DateTime         @default(now())
  isRead     Boolean          @default(false)

  @@index([userId])
  @@index([commentId])
  @@index([fromUserId])
  @@index([replyId])
}
